{"./":{"url":"./","title":"简介","keywords":"","body":"EasyClick单机版 解放双手，可编程式、智能化自动点击App；只要会敲键盘就能进行编程！ 简单易编程 丰富的API，图像识别 可脱机运行，可单独发布 支持无障碍/免ROOT运行 智能IDE编程支持 ... EasyClick企业版 云控平台，数千台手机同步运行，节省企业测试成本 不局限地域，任意地方部署设备 云端画面实时同步 定时/非定时执行任务 人机控制同步，人工可介入控制替代自动操作 ... 适合人群 有意学习自动化脚本的人员 希望用自动操作代替手动的人员 企业App测试团队及测试人员 技术交流 QQ群：777164022 EasyClick Demo Get Started "},"zh-cn/features.html":{"url":"zh-cn/features.html","title":"特性","keywords":"","body":"功能特性 支持 Android 5.0 ~ 9.0 支持 Root/免Root，无障碍运行 支持所有点击动作在坐标区域内随机 支持色块、颜色查找 支持控件查找，非找坐标模式，更加智能 支持OpenCV图像匹配识别技术，图像识别率95%以上 支持图像转文字技术，直接识别文字验证码 语言工具特性 使用JavaScript语言开发，更容易上手 所有Java的类库都适用，无需重复编写代码 智能IDE支持，屏幕实时同步 自带日志查看功能，实时查看运行结果 ...... 下一章: 2分钟完成一个自动化点击App，点击迅速入门 "},"zh-cn/getting-start.html":{"url":"zh-cn/getting-start.html","title":"开始","keywords":"","body":"下载开发工具 百度网盘下载 提取码：7bhy 天翼云下载 密码：nup3 QQ群下载：777164022 解压后，打开bin/idea64.exe文件开始运行 创建工程 创建成功 连接设备 点击菜单 'EasyClick开发工具' - '设备连接' 选择任意一个连接方式 运行程序 预览UI 运行工程，如果运行失败提示无权限，可以点击菜单 'EasyClick开发工具' - '激活设备' "},"zh-cn/funcs/devtools/dev-tools.html":{"url":"zh-cn/funcs/devtools/dev-tools.html","title":"开发工具介绍","keywords":"","body":" 安装 工程相关 设备相关 屏幕相关 设置相关 "},"zh-cn/funcs/devtools/dev-tools-install.html":{"url":"zh-cn/funcs/devtools/dev-tools-install.html","title":"安装","keywords":"","body":"开发环境安装 百度网盘下载 提取码：7bhy 天翼云下载 密码：nup3 QQ群下载：777164022 解压后，打开bin/idea64.exe文件开始运行 主界面预览 "},"zh-cn/funcs/devtools/dev-tools-project.html":{"url":"zh-cn/funcs/devtools/dev-tools-project.html","title":"工程相关","keywords":"","body":"工程相关 创建工程 创建成功 预览工程 菜单 'EasyClick开发工具' - '预览工程' 在工程或者源码文件上点击右键选择 '预览工程' 预览工程会将UI视图直接在手机预览 运行工程 菜单 'EasyClick开发工具' - '运行工程' 在工程或者源码文件上点击右键选择 '运行工程' 运行工程会直接在手机上运行脚本，所有的日志在'EasyClick运行日志'可看到 打包 菜单 'EasyClick开发工具' - '打包工程' 在工程或者源码文件上点击右键选择 '打包工程' 打包工程会编译源码并输入apk文件，所有的日志在'EasyClick运行日志'可看到 "},"zh-cn/funcs/devtools/dev-tools-device.html":{"url":"zh-cn/funcs/devtools/dev-tools-device.html","title":"设备相关","keywords":"","body":"设备相关 菜单栏-EasyClick开发工具-设备连接 设备连接 USB连接 WIFI连接 WIFI连接是指需要再手机上开启无线调试模式， 点击wifi连接，然后输入手机ip地址即可 二维码安装 如果部分手机无法安装上EC单机版程序，可以使用扫码方式安装 设备激活 菜单栏-EasyClick开发工具-激活设备 激活设备实现免root运行脚本 激活设备可以实现自动开启无障碍，无需手动开启 "},"zh-cn/funcs/devtools/dev-tools-screen.html":{"url":"zh-cn/funcs/devtools/dev-tools-screen.html","title":"屏幕相关","keywords":"","body":"屏幕相关 菜单栏-EasyClick开发工具-节点抓取节点抓取 点击节点抓取按钮，可以获取当前的屏幕元素 可以在抓取的屏幕上进行点击，选择元素 可以在节点属性窗口，复制节点的值 同屏映射 点击屏幕映射按钮，可以连接到当前的设备屏幕，实时预览和操作 如果窗口太小，可以点击右上方的三点按钮，使得窗口进行浮动起来 找色找图操作 点击节点抓取按钮，可以获取当前的屏幕元素 在图片上点击右键，选择图色模式 在图片上想要的区域，拖动出一个矩形框 点击右键选择 取色，然后设置想要取得色块的矩阵大小，点击确定 生成颜色值后，进行复制到代码中使用 找图：直接选择找图菜单，将图片保存到工程目录下的res文件夹中 "},"zh-cn/funcs/devtools/dev-tools-settings.html":{"url":"zh-cn/funcs/devtools/dev-tools-settings.html","title":"设置","keywords":"","body":"设置相关 设置 菜单栏-EasyClick开发工具-EasyClick设置 设置包括了和屏幕映射相关的属性 "},"zh-cn/funcs.html":{"url":"zh-cn/funcs.html","title":"功能函数","keywords":"","body":" 全局模块 全局快捷事件 选择器&节点 无障碍事件 代理事件 图色函数 设备函数 文件函数 网络函数 线程函数 常用工具函数 Shell命令函数 "},"zh-cn/funcs/global/global.html":{"url":"zh-cn/funcs/global/global.html","title":"全局模块","keywords":"","body":"说明 全局模块是指直接调用方法就可以使用的模块，无需使用前缀对象名称 模块加载 loadECModule 载入自带模块 载入EC自带的模块 @param libName 模块名称 @return 模块名称 var result = loadECModule(\"global\"); loadECPlugin 载入三方插件 载入EC三方开发的插件 @param libName 插件名称 @return 插件名称 var result = loadECPlugin(\"plugintest\"); loadDex 载入dex或者apk 载入dex文件 @param path 路径，加载顺序分别是插件目录(例如 ab.apk)或者是文件路径(例如 /sdcard/ab.apk)加载 @return true 载入成功， false载入失败 function main(){ loadDex(\"/sdcard/a.apk\"); // a.apk中存在com.A这个这个类，可以直接使用 var obj = new com.A(); } main(); loadJar 载入jar 载入jar文件 @param path 路径，加载顺序分别是插件目录(例如 ab.jar)或者是文件路径(例如 /sdcard/ab.jar)加载 @return true 载入成功， false载入失败 function main(){ loadJar(\"/sdcard/a.jar\"); // a.jar中存在com.A这个这个类，可以直接使用 var obj = new com.A(); } main(); importClass 导入JAVA类 导入java的class给js用 @param clz class的名称例如: com.A function main(){ importClass(com.A); var obj = new com.A(); } main(); importPackage 导入JAVA包 导入java包下面所有类给js用 @param clz class的名称例如: com.b function main(){ importPackage(com.b); var obj = new com.b.A(); } main(); JSON.stringify 格式化为JSON字符串 格式化对象为JSON字符串 @param 对象 function main(){ var m ={\"sss\":\"a\"}; var d =JSON.stringify(m); toast(d); } main(); JSON.parse 转换为JSON对象 格式化JSON字符串为对象 @param 字符串 function main(){ var m ={\"sss\":\"a\"}; var d =JSON.stringify(m); d =JSON.parse(d); toast(d); } main(); 退出脚本 exit exit(); 暂停执行 sleep 休眠 @param miSecond 毫秒 loadECModule(\"global\"); function main(){ var result = sleep(1000); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); 日志消息方法 setSaveLog 设置保存日志信息到文件中 @param save 是否保存 @return 保存日志文件的目录 loadECModule(\"global\"); function main(){ var s = setSaveLog(true); logd(\"save dir is:\"+s); } main(); toast 显示Toast消息 @param msg 消息字符串 loadECModule(\"global\"); function main(){ toast(\"msg\"); } main(); logd 调试日志 @param msg 消息字符串 loadECModule(\"global\"); function main(){ logd(\"msg\"); } main(); loge 错误日志 @param msg 消息字符串 loadECModule(\"global\"); function main(){ loge(\"msg\"); } main(); logw 警告日志 @param msg 消息字符串 loadECModule(\"global\"); function main(){ logw(\"msg\"); } main(); logi 信息日志 @param msg 消息字符串 loadECModule(\"global\"); function main(){ logi(\"msg\"); } main(); 读取IEC包资源 readResString 读取res文件夹中的资源文件,并返回字符串 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 loadECModule(\"global\"); function main(){ var testData = readResString(\"a.txt\"); } main(); readResBitmap 读取res文件夹中的资源文件，并返Bitmap图片对象 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 loadECModule(\"global\"); function main(){ var b = readResBitmap(\"a.txt\"); } main(); readResAutoImage 读取res文件夹中的资源文件，并返 AutoImage 图片对象 @param fileName 文件名称，不要加res前缀 @return string 如果是null代表没内容 loadECModule(\"global\"); function main(){ var b = readResAutoImage(\"img/a.png\"); } main(); saveResToFile 保存res文件夹中的资源文件到指定的路径 @param fileName 文件名称，不要加res前缀 @param path 要保存到的路径地址，例如/sdcard/aa.txt @return boolean|布尔型 true代表保存成功 loadECModule(\"global\"); function main(){ var b = saveResToFile(\"img/a.png\",\"/sdcard/a.png\"); } main(); UI参数读取 readConfigInt @description 读取UI界面中的参数,返回是整型 @param key 在UI界面中配置的key @return 整型，找不到就返回0 loadECModule(\"global\"); function main(){ var testData = readConfigInt(\"test_key\"); } main(); readConfigString 读取UI界面中的参数,返回是字符串 @param key 在UI界面中配置的key @return 字符串 找不到就返回空字符串 loadECModule(\"global\"); function main(){ var testData = readConfigString(\"test_key\"); } main(); readConfigDouble 读取UI界面中的参数,返回是Double型 @param key 在UI界面中配置的key @return double loadECModule(\"global\"); function main(){ var testData = readConfigDouble(\"test_key\"); } main(); readConfigBoolean 读取UI界面中的参数,返回是布尔型 @param key 在UI界面中配置的key @return true 或者 false loadECModule(\"global\"); function main(){ var testData = readConfigDouble(\"test_key\"); } main(); getConfigJSON 取得配置的JSON @return JSON数据 loadECModule(\"global\"); function main(){ var testData = getConfigJSON(); } main(); updateConfig 更新配置 @param key 键 @param value 值 @return {boolean} true 成功，false失败 loadECModule(\"global\"); function main(){ updateConfig(\"a\",\"sss\"); } main(); 系统设置界面 openECSystemSetting 打开EC系统设置页面 @return true 成功 false 失败 loadECModule(\"global\"); function main(){ var result = openECSystemSetting(); } main(); 运行模式 isAccMode 是否是无障碍模式 @return true或者false loadECModule(\"global\"); function main(){ var result = isAccMode(); } main(); isAgentMode 是否是代理模式 @return true或者false loadECModule(\"global\"); function main(){ var result = isAgentMode(); } main(); "},"zh-cn/funcs/global/global-shortcut.html":{"url":"zh-cn/funcs/global/global-shortcut.html","title":"全局快捷事件","keywords":"","body":"说明 全局模块中封装的快捷事件，不用区分是无障碍模式还是代理模式 载入模块 loadECModule(\"global\"); 点击函数 clickPoint 点击坐标 @param x x坐标 @param y y坐标 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var result = clickPoint(100,100); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); click 点击选择器 @param selectors 选择器对象 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selector = S.get().text(\"我是文本\"); var result = click(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickRandom 随机点击选择器的任意元素 @param selectors 选择器对象 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selector = S.get().text(\"我是文本\"); var result = clickRandom(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickRandomRect 随机点击区域中的坐标 @param rect 区域对象 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var result = clickRandomRect(rect); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickText 点击文本 @param text 文本 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var result = clickText(\"设置\"); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClick 长点击选择器 @param selectors 选择器对象 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selector = S.get().text(\"我是文本\"); var result = longClick(selector); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClickPoint 长点击坐标 @param x x坐标 @param y y坐标 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var result = longClickPoint(100,100); if (result){ toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 滑动函数 swipe 通过选择器滑动节点 @param selectors 节点选择器 @param endX 结束的X坐标 @param endY 结束的Y坐标 @param duration 持续时长 单位毫秒 @return 布尔型 true 代表成功 false 代表失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"我是文本\"); var result = swipe(selectors,100,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeToPoint 从一个坐标滑动到另一个坐标 @param startX 起始坐标的X轴值 @param startY 起始坐标的Y轴值 @param endX 结束坐标的X轴值 @param endY 结束坐标的Y轴值 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功, false 滑动失败 loadECModule(\"global\"); function main(){ var result = swipeToPoint(10,10,100,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromDownToUp 通过选择器从下向上滑动 @param selectors 节点选择器 @param distance 滑动距离 单位是像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功，false 滑动失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"我是文本\"); var result = swipeFromDownToUp(selectors,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromUpToDown 通过选择器从上向下滑动 @param selectors 节点选择器 @param distance 滑动距离 单位是像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功，false 滑动失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"我是文本\"); var result = swipeFromUpToDown(selectors,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromRightToLeft 通过选择器从右向左滑动 @param selectors 节点选择器 @param distance 滑动距离 单位是像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功，false 滑动失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"我是文本\"); var result = swipeFromRightToLeft(selectors,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromLeftToRight 通过选择器从左向右滑动 @param selectors 节点选择器 @param distance 滑动距离 单位是像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 滑动成功，false 滑动失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"我是文本\"); var result = swipeFromLeftToRight(selectors,100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromDownToUpInScreen 向上滑动 @param distance 滑动距离 单位像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); function main(){ var result = swipeFromDownToUpInScreen(100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromUpToDownInScreen 向下滑动 @param distance 滑动距离 单位像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); function main(){ var result = swipeFromUpToDownInScreen(100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromRightToLeftInScreen 向左滑动 @param distance 滑动距离 单位像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); function main(){ var result = swipeFromRightToLeftInScreen(100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); swipeFromLeftToRightInScreen 向右滑动 @param distance 滑动距离 单位像素 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); function main(){ var result = swipeFromLeftToRightInScreen(100,200); if (result){ toast(\"滑动成功\"); } else { toast(\"滑动失败\"); } } main(); isScrollEnd 是否滚动到底部了，如果查不到元素也会返回false @param distance 滚动方向 UP,DOWN,LEFT,RIGHT @param selectors 选择器 @return false 代表未滚动到位，true 代表滚动完成了 loadECModule(\"global\"); function main(){ var selectors = S.get().className(\"android.widget.ListView\"); var result = isScrollEnd(\"UP\",selectors); if (result){ toast(\"滚动完成\"); } else { toast(\"滚动未完成\"); } } main(); 拖动函数 drag 从一个坐标到另一个坐标的拖动 @param startX 起始坐标的X轴值 @param startY 起始坐标的Y轴值 @param endX 结束坐标的X轴值 @param endY 结束坐标的Y轴值 @param duration 持续时长 单位毫秒 @return 布尔型 true 拖动成功, false 拖动失败 loadECModule(\"global\"); function main(){ var result = drag(10,10,100,100,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); dragTo 通过选择器拖动某个元素到目标元素 @param selectors 选择器 {@link S} @param destObj 目标元素选择器 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功 false 失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"设置\"); var destObj = S.get().text(\"日历\"); var result = dragTo(selectors,destObj,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); dragToPoint 通过选择器拖动某个元素到目标X Y 坐标 @param selectors 原始元素选择器 @param endX 目标 X 坐标 @param endY 目标 Y 坐标 @param duration 持续时长 单位毫秒 @return 布尔型 true 成功 false 失败 loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"设置\"); var result = dragToPoint(selectors,100,100,200); if (result){ toast(\"拖动成功\"); } else { toast(\"拖动失败\"); } } main(); 输入数据 currentIsOurIme 当前是否是我们的输入法 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var result = currentIsOurIme(); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); inputText 通过选择器输入数据 @param selectors 选择器 @param content 数据字符串 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selectors=S.get().className(\"android.widget.EditText\"); var result = inputText(selectors,\"我是内容\"); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); imeInputText 使用输入法输入内容，前提是已经设置本程序的输入法为默认输入法 @param selectors 选择器 @param content 数据字符串 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selectors=S.get().className(\"android.widget.EditText\"); var result = imeInputText(selectors,\"我是内容\"); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); clearTextField 清除文本数据 @param selectors 节点选择器 @return {boolean|布尔型} loadECModule(\"global\"); function main(){ var selectors=S.get().className(\"android.widget.EditText\"); var result = clearTextField(selectors); if (result){ toast(\"是\"); } else { toast(\"否\"); } } main(); 节点操作 has 通过选择器判断元素是否存在 @param selectors 选择器 @return {null|布尔型} loadECModule(\"global\"); function main(){ var selectors = S.get().text(\"设置\"); var result = has(selectors); if (result){ toast(\"存在节点\"); } else { toast(\"不存在节点\"); } } main(); getText 获取选择器得到的文本数据 @param selectors 选择器 @return {字符串数组|null|字符串集合} loadECModule(\"global\"); function main(){ var selectors = S.get().className(\"android.widget.TextView\"); var result = getText(selectors); toast(\"result:\"+result); } main(); getNodeInfo 获取节点信息 @param selectors 选择器 @return {null|NodeInfo数组|节点信息集合} loadECModule(\"global\"); function main(){ var selectors = S.get().className(\"android.widget.TextView\"); var result = getNodeInfo(selectors); toast(\"result:\"+result); } main(); getNodeAttrs 获取节点属性信息 @param selectors 选择器 @param attr 属性值,例如 text,className，更多的属性请参考NodeInfo对象属性 @return {null|字符串数组|Rect对象数组} loadECModule(\"global\"); function main(){ var selectors = S.get().className(\"android.widget.TextView\"); //获取所有text属性 var result = getNodeAttrs(selectors,\"text\"); toast(\"result:\"+result); //获取所有bounds属性 result = getNodeAttrs(selectors,\"bounds\"); toast(\"result:\"+result); } main(); getOneNodeInfo 通过选择器 获取第一个节点信息 @param selectors 选择器 @return NodeInfo 对象或者null loadECModule(\"global\"); function main(){ var selectors = S.get().className(\"android.widget.TextView\"); var result = getOneNodeInfo(selectors); toast(\"result:\"+result); if (result){ result.click(); } } main(); setFetchNodeMode 设置获取节点的模式 @param mode 1 是增强型， 2 是快速型，默认是增强型 @return {boolean|*} loadECModule(\"global\"); function main(){ var result = setFetchNodeMode(1); toast(\"result:\"+result); } main(); dumpXml 将元素节点变成XML @return string string|null loadECModule(\"global\"); function main(){ var result = dumpXml(selectors); if (result){ toast(\"ok\"); } else { toast(\"no\"); } } main(); 系统按键相关 home 返回主页 @return {null|布尔型} loadECModule(\"global\"); function main(){ var result = home(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); back 返回键 @return {null|布尔型} loadECModule(\"global\"); function main(){ var result = back(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); openNotification 打开通知栏 @return {null|布尔型} loadECModule(\"global\"); function main(){ var result = openNotification(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); openQuickSettings 打开快速设置 @return {null|布尔型} loadECModule(\"global\"); function main(){ var result = openQuickSettings(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); recentApps 最近APP任务按键 @return {null|布尔型} loadECModule(\"global\"); function main(){ var result = recentApps(); if (result){ toast(\"成功\"); } else { toast(\"失败\"); } } main(); getRunningPkg 取得当前运行的App包名 @return {字符串|null} loadECModule(\"global\"); function main(){ var result = getRunningPkg(); } main(); getRunningActivity 取得当前运行的Activity类名 @return {字符串|null} loadECModule(\"global\"); function main(){ var result = getRunningActivity(); } main(); 通知栏 requestNotificationPermission 请求监听状态栏的权限 @param timeout 请求权限超时时间 单位是秒 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ var result = requestNotificationPermission(10); toast(\"是否有权限:\"+result); } main(); hasNotificationPermission 检查是否含有状态栏监听权限 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ var result = hasNotificationPermission(); toast(\"是否有权限:\"+result); } main(); getLastNotification 获取最近通知栏对象 @param pkg 指定包名 @param size 指定获取的条数 @return {NotificationInfo数组|null} loadECModule(\"global\"); function main(){ //获取微信100条通知栏记录 var result = getLastNotification(\"com.tencent.mm\",100); toast(\"结果:\"+result); } main(); shotNotification 将通知发射处理，相当于点击了通知栏 @param seqId @return {boolean|布尔型} loadECModule(\"global\"); function main(){ //获取微信1条通知，然后进行点击 var result = getLastNotification(\"com.tencent.mm\",1); if (result!=null && result.length>0){ var s = shotNotification(result[0].seqId); toast(\"结果:\"+s); } } main(); cancelNotification 将通知进行取消操作 @param seqId @return {boolean|布尔型} loadECModule(\"global\"); function main(){ //获取微信1条通知，然后进行取消 var result = getLastNotification(\"com.tencent.mm\",1); if (result!=null && result.length>0){ var s = cancelNotification(result[0].seqId); toast(\"结果:\"+s); } } main(); getLastToast 获取toast数据 @param pkg 指定包名 @param size 指定获取的条数 @return {null|ToastInfo数组} loadECModule(\"global\"); function main(){ var result = getLastToast(\"com.tencent.mm\",100); toast(\"结果:\"+result); } main(); 悬浮窗日志 requestShowLogPermission 请求展示日志浮窗的权限 @param timeout 请求权限超时时间 单位是秒 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ var result = requestShowLogPermission(10); toast(\"是否有权限:\"+result); } main(); hasShowLogPermission 检查是否含有浮窗权限 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ var result = hasShowLogPermission(); toast(\"是否有权限:\"+result); } main(); showLogWindow 展示日志浮窗 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ var result = showLogWindow(); toast(\"是否展示:\"+result); } main(); closeLogWindow 关闭日志浮窗 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); function main(){ closeLogWindow(); } main(); setLogViewSize 设置日志窗口大小 @param w 宽度 @param h 高度 @param textSize 日志的字体大小 @param backgroundColor 背景颜色，例如#336699 loadECModule(\"global\"); function main(){ setLogViewSize(500,600,14,\"#FFFFFF\"); } main(); setLogText 展示消息到悬浮窗日志中，颜色是白色的 @param msg 消息 loadECModule(\"global\"); function main(){ var result = setLogText(\"开始运行...\"); } main(); "},"zh-cn/funcs/global/selector-node.html":{"url":"zh-cn/funcs/global/selector-node.html","title":"选择器&节点","keywords":"","body":"说明 这个章节主要讲解选择器类使用和节点信息类 选择器对象 选择器对象是支持级联选择，可以在无法直接选择到元素的时候，先通过选择父级后再选择子级 选择器部分支撑正则匹配，请参考java的正则语法，教程 基本用法 S.get() loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象,但是这个选择器是没有任何条件属性的 var selector = S.get(); } main(); text属性选择 全文本匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().text(\"设置\"); click(selector); } main(); 包含匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().textContains(\"设置\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 开头匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().textStartsWith(\"设置\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().textMatches(\".*设置.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); resourceId属性选择 全量匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().resourceId(\"com.tencent.mm:id/a1\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().resourceIdMatches(\".*id8.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); className属性选择 全量匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().className(\"android.widget.TextView\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().classNameMatches(\".*TextView.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); packageName属性选择 全量匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().packageName(\"com.tencent.mm\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().packageNameMatches(\".*tencent.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); description文本属性选择 全量匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().description(\"我是描述\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 包含匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().descriptionContains(\"我是描述\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 开头匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().descriptionStartsWith(\"我是描述\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 正则匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().descriptionMatches(\".*描述.*\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main() 深度和绘制顺序匹配 主要目标是为了消除动态ID(例如抖音等)、相同的ID带来的问题 drawingOrder loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().drawingOrder(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); depth loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().depth(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 其他匹配规则 checkable loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().checkable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); checked loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().checked(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); clickable loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().clickable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); longClickable loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().longClickable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); scrollable loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().scrollable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); focusable loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().focusable(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); enabled loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().enabled(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); focused loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().focused(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); selected loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().selected(true); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); index loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 var selector = S.get().index(1); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 级联匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 父级为android.widget.ScrollView下的子节点className=android.widget.CheckBox所有节点 var selector = S.get().className(\"android.widget.ScrollView\") .child() .className(\"android.widget.CheckBox\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 多属性匹配 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象， //选择包含\"选择器\"并且checked=true并且类名=android.widget.CheckBox的元素 var selector = S.get().textContains(\"选择器\") .checked(true) .className(\"android.widget.CheckBox\"); var result = click(selector); if (result) { toast(\"点击成功\"); } else { toast(\"点击失败\"); } } main(); 节点信息类 节点对象NodeInfo，可以通过获取getNodeInfo方法获取到节点信息的数组,节点包含的信息如下 resourceId: 字符串，资源的ID className: 字符串，视图类名，例如 android.widget.TextView packageName: 字符串，包名，例如com.tencent.mm contentDescription: 字符串，内容描述 text: 字符串，文本 checkable: 布尔型，是否可选中 checked: 布尔型，是否选中 clickable: 布尔型，是否可点击 enabled: 布尔型，是否启用 focusable: 布尔型，是否可获取焦点 focused: 布尔型，是否聚焦 longClickable: 布尔型，是否可长点击 scrollable: 布尔型，是否滚动 selected: 布尔型，是否被选择 childCount: 整型，子节点的个数 index: 整型 节点的索引 depth: 整型 节点的层级深度 drawingOrder: 整型 节点的绘制顺序 bounds: Rect型，空间对象 top: 整型，顶部位置 bottom: 整型，底部位置 left: 整型，左边位置 right: 整型，右边位置 visibleBounds: Rect型，可视空间对象 top: 整型，顶部位置 bottom: 整型，底部位置 left: 整型，左边位置 right: 整型，右边位置 获取父节点 parent 该节点的父级节点 @return NodeInfo 对象 或者null loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.CheckBox所有节点 var selector = S.get().className(\"android.widget.CheckBox\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.parent(); logd(x); } else { toast(\"无节点\"); } } main(); 获取子节点 child 取得单个子节点 @param index 子节点索引 @return NodeInfo 对象 或者null loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //选择 节点className=android.widget.ViewGroup 所有节点 var selector = S.get().className(\"android.widget.ViewGroup\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.child(0); logd(x); } else { toast(\"无节点\"); } } main(); 获取所有子节点 allChildren 获取所有子节点 @return NodeInfo 节点集合 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //选择 节点className=android.widget.ViewGroup 所有节点 var selector = S.get().className(\"android.widget.ViewGroup\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.allChildren(); logd(x); } else { toast(\"无节点\"); } } main(); 所有兄弟节点 siblings 当前节点的所有兄弟节点 @return NodeInfo 节点集合 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //选择 节点className=android.widget.ViewGroup 所有节点 var selector = S.get().className(\"android.widget.ViewGroup\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.siblings(); logd(x); } else { toast(\"无节点\"); } } main(); 前面的兄弟节点 previousSiblings 在当前节点前面的兄弟节点 @return NodeInfo 节点集合 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //选择 节点className=android.widget.ViewGroup 所有节点 var selector = S.get().className(\"android.widget.ViewGroup\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.previousSiblings(); logd(x); } else { toast(\"无节点\"); } } main(); 后面的兄弟节点 nextSiblings 在当前节点后面的兄弟节点 @return NodeInfo 节点集合 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //选择 节点className=android.widget.ViewGroup 所有节点 var selector = S.get().className(\"android.widget.ViewGroup\"); var node = getOneNodeInfo(selector); if (node!=null) { var x= node.nextSiblings(); logd(x); } else { toast(\"无节点\"); } } main(); 节点点击 click 点击节点 @return bool, true 成功 ,false 失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.CheckBox所有节点 var selector = S.get().className(\"android.widget.CheckBox\"); var node = getOneNodeInfo(selector); if (node!=null) { node.click() } else { toast(\"无节点\"); } } main(); 节点长点击 longClick 长点击节点 @return bool, true 成功 ,false 失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.CheckBox所有节点 var selector = S.get().className(\"android.widget.CheckBox\"); var node = getOneNodeInfo(selector); if (node!=null) { node.longClick() } else { toast(\"无节点\"); } } main(); 节点输入 inputText 对某个节点输入数据 @param content 要输入的内容 @return bool, true 成功 ,false 失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.EditText 所有节点 var selector = S.get().className(\"android.widget.EditText\"); var node = getOneNodeInfo(selector); if (node!=null) { node.inputText(\"内容\") } else { toast(\"无节点\"); } } main(); 节点输入法输入 imeInputText 使用输入法对某个节点输入数据，前提是已经设置本程序的输入法为默认输入法 @param content 要输入的内容 @return bool, true 成功 ,false 失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.EditText 所有节点 var selector = S.get().className(\"android.widget.EditText\"); var node = getOneNodeInfo(selector); if (node!=null) { node.imeInputText(\"内容\") } else { toast(\"无节点\"); } } main(); 节点数据清除 clearText 清除节点文本数据 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.EditText 所有节点 var selector = S.get().className(\"android.widget.EditText\"); var node = getOneNodeInfo(selector); if (node!=null) { node.clearText() } else { toast(\"无节点\"); } } main(); 节点刷新 refresh 该方法会刷新节点缓存 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.EditText 所有节点 var selector = S.get().className(\"android.widget.EditText\"); var node = getOneNodeInfo(selector); if (node!=null) { node.refresh(); } else { toast(\"无节点\"); } } main(); 节点有效判断 isValid 节点信息是否有效 @return bool|布尔型 true代表有 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //获取选择器对象 //选择 节点className=android.widget.EditText 所有节点 var selector = S.get().className(\"android.widget.EditText\"); var node = getOneNodeInfo(selector); if (node!=null) { var x =node.isValid(); toast(\"节点有效性:\"+x); } else { toast(\"无节点\"); } } main(); "},"zh-cn/funcs/acevent-api.html":{"url":"zh-cn/funcs/acevent-api.html","title":"无障碍事件","keywords":"","body":"说明 无障碍模式需要打开无障碍服务 并且手机是7.0以上版本，如果使用电脑激活过，会自动打开无障碍服务哦！ 无障碍模式下，API限制较多，无法全部达到代理模式下的功能 函数调用请看全局函数 载入模块 loadECModule(\"acEvent\"); "},"zh-cn/funcs/event-api.html":{"url":"zh-cn/funcs/event-api.html","title":"代理事件","keywords":"","body":"说明 代理事件模块运行的所有函数，是需要使用电脑激活才能使用的，免root 代理事件模块的对象前缀是agentEvent，例如 agentEvent.clickPoint这样调用 这里列出来的是代理模式特有的函数，其他调用可以直接使用全局函数 载入模块 loadECModule(\"agentEvent\"); 输入数据 setCurrentIme 设置当前的输入法，用于输入数据 @return {boolean|布尔型} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.setCurrentIme(); if (result){ toast(\"是\"); }else { toast(\"否\"); } } main(); restoreIme 恢复到之前的输入法 @return {boolean|布尔型} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.restoreIme(); if (result){ toast(\"是\"); }else { toast(\"否\"); } } main(); 截图 fastScreenshot 快速截屏幕的截图 @param filename 文件路径 @return 字符串 截图的路径 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.fastScreenshot(\"/sdcard/a.jpg\"); toast(\"result:\"+result); } main(); takeNodeScreenshot 通过选择器截取选中的元素截图 @param selectors {@link NodeSelectors}元素选择器 @param filePath 最终文件路径 @return 布尔型 true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var selectors = S.get().className(\"android.widget.TextView\"); var result = agentEvent.takeNodeScreenshot(selectors,\"/sdcard/a.png\"); toast(\"result:\"+result); } main(); takeScreenshot 获取屏幕截图并保存到文件中 @param fileName 文件路径 @return 布尔型 截图成功返回 true loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.takeScreenshot(\"/sdcard/a.png\"); toast(\"result:\"+result); } main(); takeScreenshotImage 截图返回autoimage对象 ,(底层命令截图 速度大概1-2秒) @return AutoImage 对象或者null loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.takeScreenshotImage(); toast(\"result:\"+result); } main(); takeScreenshotMore 取得一张屏幕的截图 @param filename 文件路径 @param scale 缩放比例 0 ~ 1 @param quality 图片质量 0 - 100 @return 字符串 截图的路径 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.takeScreenshotMore(\"/sdcard/a.png\",1,50); toast(\"result:\"+result); } main(); 手势及输入事件 inputEvent 执行输入事件 @param action 动作，请看类: MotionEvent.ACTION_* @param x x坐标 @param y y坐标 @param metaState 控制按键，比如说shift键，alt键，ctrl键等控制键, 0或者 1 any meta info @return 布尔型 true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.inputEvent(1,10,10,0); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchDown 执行按下输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.touchDown(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchMove 执行移动输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.touchMove(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); touchUp 执行弹起输入事件 @param x x坐标 @param y y坐标 @return 布尔型 true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.touchUp(10,10); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); multiTouch 多点触摸 多点触摸 触摸参数: action :一般情况下 按下为0，弹起为1，移动为2 x: X坐标 y: Y坐标 pointer：设置第几个手指触摸点，分别是 1，2，3等，代表第n个手指 delay: 该动作延迟多少毫秒执行 @param touch1 第1个手指的触摸点数组,例如：[{\"action\":0,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20},{\"action\":2,\"x\":1,\"y\":1,\"pointer\":1,\"delay\":20}] @param touch2 第2个手指的触摸点数组 @param touch3 第3个手指的触摸点数组 @param timeout 多点触摸执行的超时时间，单位是毫秒 @return boolean|布尔型 loadECModule(\"global\"); loadECModule(\"utils\"); function main() { utils.openAppByName(\"抖音短视频\"); sleep(3000); //第一种数组式的写法 var touch1 = [ {\"action\": 0, \"x\": 500, \"y\": 1200, \"pointer\": 1, \"delay\": 1}, { \"action\": 2, \"x\": 500, \"y\": 1100, \"pointer\": 1, \"delay\": 20 }, { \"action\": 2, \"x\": 500, \"y\": 1000, \"pointer\": 1, \"delay\": 20 }, { \"action\": 1, \"x\": 1, \"y\": 1, \"pointer\": 1, \"delay\": 20 }]; //第二种链式调用方法 var touch2 = MultiPoint .get() .action(0).x(500).y(1200).pointer(1).delay(1) .next() .action(2).x(500).y(1100).pointer(1).delay(1) .next() .action(2).x(500).y(1000).pointer(1).delay(1) .next() .action(2).x(500).y(900).pointer(1).delay(1) .next() .action(1).x(500).y(800).pointer(1).delay(1); var touch1 = MultiPoint .get() .action(0).x(300).y(1200).pointer(2).delay(1) .next() .action(2).x(300).y(1100).pointer(2).delay(1) .next() .action(2).x(300).y(1000).pointer(2).delay(1) .next() .action(2).x(300).y(900).pointer(2).delay(1) .next() .action(1).x(300).y(800).pointer(2).delay(1); var x = agentEvent.multiTouch(touch1, touch2, null, 30000); logd(\"xxs \" + x); } main(); pressKey 模拟按键,例如home back等 @param key 对应的值分别为 home, back, left, right, up, down, center, menu, search, enter, delete(or del), recent(recent apps), volume_up, volume_down, volume_mute, camera, power @return 布尔型 true 成功, false 失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.pressKey(\"home\"); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); pressKeyCode 模拟键盘输入 @param keyCode 键盘的key，参见KeyEvent.KEYCODE_* @return 布尔型 true 代表成功，false 代表失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.pressKeyCode(65); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); pressKeyCodeWithMetaState 模拟键盘输入 @param keyCode keyCode 键盘的key，参见KeyEvent.KEYCODE_* @param metaState metaState 控制按键，比如说shift键，alt键，ctrl键等控制键, 0或者 1 @return 布尔型 true 代表成功，false 代表失败。 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.pressKeyCodeWithMetaState(65,1); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); 系统按键相关 menu 打开菜单 @return {null|布尔型} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.menu(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); enter Enter键 @return {null|布尔型} var result = agentEvent.enter(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); ``` delete 删除键 @return {null|布尔型} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.delete(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); search 搜索 @return {null|布尔型} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var result = agentEvent.search(); if (result){ toast(\"成功\"); }else { toast(\"失败\"); } } main(); orientationRight 向右旋转 @return {字符串|null} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ agentEvent.orientationRight(); } main(); orientationNatural 自然状态 @return {字符串|null} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ agentEvent.orientationNatural(); } main(); orientationNatural 自然状态 @return {字符串|null} loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ agentEvent.orientationNatural(); } main(); 屏幕控制 closeScreen 关闭屏幕，屏幕不亮，但是依然可以自动点击，不同于sleepScreen @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var x =agentEvent.closeScreen(); } main(); lightScreen 点亮屏幕，和closeScreen相反的动作 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var x =agentEvent.lightScreen(); } main(); isScreenOn 检查屏幕是否是点亮的 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var x =agentEvent.isScreenOn(); } main(); wakeUp 唤醒设备 @return 布尔型 true 成功，false 失败 loadECModule(\"global\"); loadECModule(\"agentEvent\"); function main(){ var x =agentEvent.wakeUp(); } main(); 其他函数 其他包括 滚动，缩放，flip手势等，请查看js代码 "},"zh-cn/funcs/image-api.html":{"url":"zh-cn/funcs/image-api.html","title":"图色函数","keywords":"","body":"说明 截图函数需要Andrioid 5.0 以上版本才能使用 无障碍模式下截图是需要权限的，如果弹出了运行截图，请授权 代理模式下的截图不需要权限，建议长期运行使用代理模式 图色模块的对象前缀是image，例如 image.requestScreenCapture()这样调用 图色模块需要对颜色进行查找，开发工具自带找色功能，请参考找色找图操作 载入模块 loadECModule(\"image\"); 申请截图 image.requestScreenCapture 向系统申请屏幕截图权限，返回是否请求成功。 第一次使用该函数会弹出截图权限请求，建议选择“总是允许”。 这个函数只是申请截图权限，并不会真正执行截图，真正的截图函数是captureScreen()。 该函数在截图脚本中只需执行一次，而无需每次调用captureScreen()都调用一次。 建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象。 @return true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); } } main(); image.requestScreenCaptureOri 向系统申请屏幕截图权限，返回是否请求成功。 @param orientation 屏幕方向，1 代表竖屏 2 代表横屏 @return true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCaptureOri(1); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); } } main(); image.releaseScreenCapture 释放截屏请求 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { image.releaseScreenCapture(); } main(); 截图 image.captureScreen 截取当前屏幕并返回一个Image对象。 没有截图权限时执行该函数会返回null 两次调用可能返回相同的Image对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是16ms）连续调用则会返回同一张截图。 截图需要转换为Bitmap格式，从而该函数执行需要一定的时间(0~20ms)。 另外在requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用captureScreen()，会等待一定时间后(一般为几百ms)才返回截图。 @return AutoImage对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var image = image.captureScreen(); if (image!=null){ toast(\"截图成功\"); } else { toast(\"截图失败\"); } } main(); image.captureScreenToFile 截取当前屏幕并以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。 @param path 截图保存路径 @return true 截图成功 false 代表不成功 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var cap = image.captureScreenToFile(\"/sdcard/a.png\"); if (cap){ toast(\"截图成功\"); }else { toast(\"截图失败\"); } } main(); 找色 image.findColor 在图片中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @return Point 对象 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var point = image.findColor(aimage, color, 0); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorEquals 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @return Point 坐标点或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var point = image.findColorEquals(aimage, color); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorEqualsRegion 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 rect 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定region选项，则找色区域为整张图片。 @return Point 坐标点或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findColorEqualsRegion(aimage, color, rect); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findColorRegion 在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回null。 @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @return Point 坐标点或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var color = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findColorRegion(aimage, color,4, rect); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findMultiColors 多点找色，返回第一个找到的点，类似于按键精灵的多点找色 整张图片都找不到时返回null @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return Point 坐标点或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var point = image.findMultiColors(aimage, firstColor, 4, rect, colors); if (point != null) { clickPoint(point.x, point.y); } } } main(); image.findMultiColorsCurrentScreen 多点找色,返回第一个找到的点，在当前屏幕中，类似于按键精灵的多点找色 整张图片都找不到时返回null @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return Point 坐标点或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var point = image.findMultiColorsCurrentScreen(firstColor, 4, null, colors); if (point != null) { clickPoint(point.x, point.y); } } main(); image.findAllMultiColors 多点找色，找到所有符合标准的点，类似于按键精灵的多点找色 @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 数组，表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return 多个Point 坐标点数组或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var points = image.findAllMultiColors(aimage, firstColor, 4, null, colors); if (points != null) { for (var i = 0; i image.findAllMultiColorsCurrentScreen 多点找色，找到所有符合标准的点，自动抓取当前屏幕的图片，类似于按键精灵的多点找色 @param image 要找色的图片 @param firstColor 第一个点的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @param points 数组，表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] @return 多个Point 坐标点数组或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var firstColor = -15558949; var colors = [4, 4, -15558949, 4, 12, -15558949, 4, 20, -15558949, 4, 28, -15558949, 4, 36, -15558949, 4, 44, -15558949, 13, 4, -15558949, 13, 12, -15558949, 13, 20, -15558949, 13, 28, -15558949, 13, 36, -15558949, 13, 44, -15558949, 22, 4, -15558949, 22, 12, -15558949, 22, 20, -15558949, 22, 28, -15558949, 22, 36, -15558949, 22, 44, -15558949, 31, 4, -15558949, 31, 12, -15558949, 31, 20, -15558949, 31, 28, -15558949, 31, 36, -15558949, 31, 44, -15558949, 40, 4, -15558949, 40, 12, -15558949, 40, 20, -15558949, 40, 28, -15558949, 40, 36, -15558949, 40, 44, -15558949, 49, 4, -15558949, 49, 12, -15558949, 49, 20, -15558949, 49, 28, -15558949, 49, 36, -15558949, 49, 44, -15558949]; var points = image.findAllMultiColorsCurrentScreen(firstColor, 4, null, colors); if (points != null) { for (var i = 0; i image.findAllPointsForColor 在图片img指定区域中找到颜色和color完全相等的所有点，并返回集合，没有就返回null @param image 图片 @param color 要寻找的颜色 @param threshold 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. @param rect 找色区域。是一个两个或四个元素的数组。(left,top)表示找色区域的左上角； right,bottom 表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(left,top)到屏幕右下角。如果不指定 rect 选项，则找色区域为整张图片。 @return 多个Point 坐标点数组或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var firstColor = -15558949; var rect = new Rect(); rect.left = 10; rect.right = 200; rect.top = 10; rect.bottom = 400; var points = image.findAllPointsForColor(firstColor, 4, rect); if (points != null) { for (var i = 0; i 找图 image.findImage 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageCurrentScreen( sms, 1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找 point = image.findImage(aimage, sms, 1); logd(\"point \"+point); } } main(); image.findImageCurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageCurrentScreen( sms, 1); logd(\"point \"+point); } main(); image.findImageThreshold 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageThresholdCurrentScreen( sms,0.7, 1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找 point = image.findImageThreshold(aimage, sms,0.7, 1); logd(\"point \"+point); } } main(); image.findImageThresholdCurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); //在当前屏幕中查找，并且限制只查找一个 var point = image.findImageThresholdCurrentScreen( sms,0.7, 1); logd(\"point \"+point); } main(); image.findImageRegion1 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = new Rect(); rect.left=230; rect.top=1700; rect.right=500; rect.bottom=1900; //在当前屏幕中查找，并且限制只查找一个,rect参数 可以不写 var point = image.findImageRegion1CurrentScreen( sms,0.7, rect,1); logd(\"point \"+point); //抓取屏幕 var aimage = image.captureScreen(); logd(\"aimage \"+aimage); if (aimage != null) { //在图片中查找,rect参数 可以不写 point = image.findImageRegion1(aimage, sms,0.7,rect, 1); logd(\"point \"+point); } } main(); image.findImageRegion1CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var request = image.requestScreenCapture(); if (request){ toast(\"申请成功\"); }else { toast(\"申请失败\"); exit(); } sleep(5000); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = new Rect(); rect.left=230; rect.top=1700; rect.right=500; rect.bottom=1900; //在当前屏幕中查找，并且限制只查找一个,rect参数 可以不写 var point = image.findImageRegion1CurrentScreen( sms,0.7, rect,1); logd(\"point \"+point); } main(); image.findImageRegion2 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param x 找图区域 x 起始坐标 @param y 找图区域 y 起始坐标 @param w 找图区域 w 宽度 @param h 找图区域 h 高度 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion2(aimage, sms,10,10,100,100,0.9,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion2CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param x 找图区域 x 起始坐标 @param y 找图区域 y 起始坐标 @param w 找图区域 w 宽度 @param h 找图区域 h 高度 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion2CurrentScreen(sms,10,10,100,100,0.9,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion3CurrentScreen 找图。在当前屏幕中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; //从工程目录下res文件夹下读取sms.png文件 var sms=readResAutoImage(\"sms.png\"); var rect = image.findImageRegion3CurrentScreen( sms,0.9,0.9,rectp,-1,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.findImageRegion3 找图。在大图片image中查找小图片template的位置（模块匹配），找到时返回位置坐标区域(Rect)，找不到时返回null。 @param image 大图片 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Rect 区域坐标对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = image.readImage(\"/sdcard/tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var rect = image.findImageRegion3(aimage, temp,0.9,0.9,rectp,-1,1); if (rect != null) { clickRandomRect(rect); toast(rect); } } } main(); image.matchTemplate 模板匹配 OpenCV模板匹配封装 @param image 大图片 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Match集合 或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = readResAutoImage(\"tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var x = image.matchTemplate(aimage, temp,0.9,0.9,rectp,-1,1); logd(x); } } main(); image.matchTemplateCurrentScreen 模板匹配 OpenCV模板匹配封装，在当前屏幕截图中进行匹配 @param template 小图片（模板） @param weakThreshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param threshold 图片相似度。取值范围为0~1的浮点数。默认值为0.9。 @param rect 找图区域。参见findColor函数关于 rect 的说明。 @param maxLevel 默认为-1，一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。 @param limit 限制结果的数量，如果要找到1个，就填写1，如果是多个请填写多个 @return Match集合 或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var req = image.requestScreenCapture(); if (!req) { req = image.requestScreenCapture(); } if (!req) { toast(\"申请权限失败\"); return; } var aimage = image.captureScreen(); if (aimage != null) { var temp = readResAutoImage(\"tmp.png\"); var rectp= new Rect(); rectp.left=10; rectp.top=100; rectp.right=100; rectp.bottom=400; var x = image.matchTemplateCurrentScreen( temp,0.9,0.9,rectp,-1,1); logd(x); } } main(); 其他 image.readImage 读取在路径path的图片文件并返回一个{@link AutoImage}对象。如果文件不存在或者文件无法解码则返回null。 @param path 图片路径 @return AutoImage 对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var autoimg = image.readImage(\"/sdcard/a.png\"); } main(); image.readBitmap 读取在路径path的图片文件并返回一个{@link AutoImage}对象。如果文件不存在或者文件无法解码则返回null。 @param path 图片路径 @return android的bitmap对象或者null loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var autoimg = image.readBitmap(\"/sdcard/a.png\"); } main(); image.pixelInImage 返回图片image在点(x, y)处的像素的ARGB值。 该值的格式为0xAARRGGBB，是一个\"32位整数\" 坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。 @param image 图片 @param x 要获取的像素的横坐标。 @param y 要获取的像素的纵坐标。 @return 整型 loadECModule(\"global\"); loadECModule(\"utils\"); loadECModule(\"image\"); function main() { var image = image.captureScreen(); var color = image.pixelInImage(image,100,100); } main(); "},"zh-cn/funcs/device-api.html":{"url":"zh-cn/funcs/device-api.html","title":"设备函数","keywords":"","body":"说明 设备模块函数主要是跟设备信息相关联 设备模块的对象前缀是device，例如 device.getIMEI()这样调用 载入模块 loadECModule(\"device\"); 函数 device.getIMEI() 获取手机的IMEI @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var imei = device.getIMEI(); toast(imei); } main(); device.getScreenWidth() 取得屏幕宽度 @return 整型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var width = device.getScreenWidth(); toast(width); } main(); device.getScreenHeight() 取得屏幕高度 @return 整型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var height = device.getScreenHeight(); toast(height); } main(); device.getAndroidId() 取得Android ID @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var androidId = device.getAndroidId(); toast(androidId); } main(); device.getBrand() 取得手机品牌 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var brand = device.getBrand(); toast(brand); } main(); device.getModel() 取得手机机型 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var model = device.getModel(); toast(model); } main(); device.getImsi() 取得手机卡号 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var imsi = device.getImsi(); toast(imsi); } main(); device.getSerial() 取得手机串号 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var serial = device.getSerial(); toast(serial); } main(); device.getSdkInt() 取得手机SDK 版本号，例如 23 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var sdkInt = device.getSdkInt(); toast(sdkInt); } main(); device.getOSVersion() 取得手机版本号,例如 6.0等字符串 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var osVersion = device.getOSVersion(); toast(osVersion); } main(); device.getMacAddress() 获取mac地址 @return 字符串 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var res = device.getMacAddress(); toast(res); } main(); device.getBattery() 取得电量 @return int型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var res = device.getBattery(); toast(res); } main(); device.getTotalMem() 取得总内存 @return long型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var res = device.getTotalMem(); toast(res); } main(); device.getAvailMem() 取得可用内存 @return long型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var res = device.getAvailMem(); toast(res); } main(); device.isCharging() 是否正在充电 @return 布尔型 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ var res = device.isCharging(); toast(res); } main(); device.vibrate() 发出震动 单位是毫秒 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ device.vibrate(1*1000); } main(); device.cancelVibration() 取消震动 loadECModule(\"global\"); loadECModule(\"device\"); function main(){ device.cancelVibration(); } main(); "},"zh-cn/funcs/file-api.html":{"url":"zh-cn/funcs/file-api.html","title":"文件函数","keywords":"","body":"说明 文件模块函数主要是跟文件信息相关联 文件模块的对象前缀是file，例如 file.readFile()这样调用 载入模块 loadECModule(\"file\"); 函数 file.readFile 将文件读取为字符串 @param path 文件路径 @return 字符串 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var data = file.readFile(\"/sdcard/test.txt\"); toast(data); } main(); file.writeFile 将字符串存储到文件中 @param data 字符串 数据 @param path 文件路径 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var data=\"Test\"; file.writeFile(data,\"/sdcard/test.txt\"); } main(); file.create 创建一个文件或者文件夹 @param path 文件或者文件夹路径 @return 布尔型 true 代表创建成功 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var create=file.create(\"/sdcard/test.txt\"); toast(create); } main(); file.readAssets 从APK的assets文件夹中读取数据为字符串 @param path assets文件夹中的文件路径，例如 data/a.txt @return 字符串 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var data=file.readAssets(\"data/test.txt\"); toast(data); } main(); file.deleteAllFile 删除所有文件或者文件夹 @param path 文件或者文件路径 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ file.deleteAllFile(\"data/test.txt\"); } main(); file.appendLine 写入一行到文件中,追加模式 @param data 行数据 @param path 文件或者文件路径 @return 布尔型 true代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var data=\"sss\"; var t=file.appendLine(data,\"/sdcard/test.txt\"); toast(t); } main(); file.readLine 读取一行数据，如果行号不对，返回的是空 @param path 路径 @param lineNo 行号 @return 字符串 返回一行字符串 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var t=file.readLine(\"/sdcard/test.txt\",1); toast(t); } main(); file.readAllLines 读取所有数据 @param path 路径 @return 字符串 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var t=file.readAllLines(\"/sdcard/test.txt\"); toast(t); } main(); file.mkdirs 创建文件夹 @param path 路径 @return 布尔型 true 代表成功，false代表失败 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var t=file.mkdirs(\"/sdcard/testdir/\"); toast(t); } main(); file.exists 文件或者文件夹是否存在 @param path 路径 @return 布尔型 true 代表成功，false代表失败 loadECModule(\"global\"); loadECModule(\"file\"); function main(){ var t=file.exists(\"/sdcard/testdir/\"); toast(t); } main(); "},"zh-cn/funcs/http-api.html":{"url":"zh-cn/funcs/http-api.html","title":"网络函数","keywords":"","body":"说明 网络模块函数主要是跟网络请求信息相关联 网络模块的对象前缀是http，例如 http.downloadFile()这样调用 载入模块 loadECModule(\"http\"); 函数 http.request 万能请求函数 HTTP万能请求 @param param map参数，包含的参数有 url:字符串 请求的地址 timeout:整型毫秒，超时时间 method: POST ,GET,PUT 字符串，代表请求的方法 proxy: 代理地址，map参数 包含主机和端口 例如 {\"host\":\"11\",\"port\":111} followRedirects:是否自动跳转 true 或者 false requestBody: 请求的body体，如果是JSON，就是JSON字符串 userAgent:字符串 HTTP 的UA ignoreContentType:是否忽略内容类型 true 或者 false ignoreHttpErrors:是否忽略错误 true 或者 false maxBodySize : 整型，HTTP BODY最大值 referrer:字符串，请求来源 header: HTTP 请求头，map参数,例如 {\"UA\":\"test\"} cookie: HTTP 请求Cookie，map参数, 例如 {\"a\":1} data:HTTP POST的数据，map参数, 例如 {\"a\":1} file:要上传的文件，集合参数，例如 [{\"key\":\"a1\",\"fileName\":\"a.txt\",\"filePath\":\"/sdcard/\"},{\"key\":\"a1\",\"fileName\":\"a.jpg\",\"filePath\":\"/sdcard/\",\"contentType\":\"image/jpg\"}] 其中contentType可有可无 responseCharset: 字符串，强制设置响应内容的编码集 @return Response 对象或者null loadECModule(\"global\"); loadECModule(\"http\"); function main(){ http_request(); } function http_request() { //url:string //timeout:int ms //method: post ,get //proxy: {\"host\":\"11\",\"port\":111} //followRedirects:true false //requestBody: string //userAgent:string //ignoreContentType:true false //ignoreHttpErrors:true false //maxBodySize : int //referrer:string //header:{\"UA\":\"test\"} //cookie:{\"a\":1} //data:{\"a\":1} //file:[{}] //responseCharset: string var md = utils.dataMd5(\"12345\"); var md2 = utils.fileMd5(\"/sdcard/sb.png\"); var url = \"http://192.168.0.5:8081/api/request\"; var proxy = {\"host\": \"192.168.0.5\", \"port\": \"100\"}; var userAgent = \"xxx\"; var followRedirects = false; var requestBody = JSON.stringify({\"A\": 111}); var ignoreContentType = true; var ignoreHttpErrors = true; var referrer = \"xxx\"; var header = { \"Content-Type\": \" application/json; charset=UTF-8\", \"User-Agent\": \"from test\", \"ddd\": md, \"dd2\": md2, \"imei\": device.getIMEI() }; var cookie = { \"cookie1\": \"tst1\", \"cookie2\": \"tst2\" }; var data = { \"a1\": \"aaa\", \"pwd2\": md, \"md2\": md2 }; var file = [ { \"key\": \"file\", \"fileName\": \"f.png\", \"filePath\": \"/sdcard/sb.png\" }, { \"key\": \"file\", \"fileName\": \"f2.png\", \"filePath\": \"/sdcard/sde.png\", \"contentType\": \"image/png\" } ]; var params = { \"url\": url, \"method\": \"POST\", \"userAgent\": userAgent, \"referrer\": \"baidu.com\", \"cookie\": cookie, \"data\": data, \"file\": file }; var x = http.request(params); if (x) { logd(\"header=> \" + x.header); logd(\"cookie=> \" + x.cookie); logd(\"statusCode=> \" + x.statusCode); logd(\"statusMessage=> \" + x.statusMessage); logd(\"charset=> \" + x.charset); logd(\"contentType=> \" + x.contentType); logd(\"body=> \" + x.body); } else { loge(\"无结果\"); } } main(); http.downloadFile 下载远程文件到本地,支持断点续传 @param remoteUrl 远程文件URL @param file 要保存到本地的文件对象 @param timeout 下载超时，单位是毫秒 @param headers – 头标志例如{“a”:“11”} @return true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ var url = \"https://imtt.dd.qq.com/16891/apk/DF4FD15AF9A9B51BA74D2710CF738EEF.apk?fsname=com.ishugui_3.9.2.3068_3923068.apk&csr=1bbd\"; var x = http.downloadFile(url, \"/sdcard/ss.apk\", 10 * 1000, {\"User-Agent\": \"test\"}); toast(\"download result-> \" + x); } main(); http.downloadFileDefault 下载远程文件到本地,支持断点续传，默认超时时间为30秒 @param remoteUrl 远程文件URL @param file 要保存到本地的文件对象 @param headers – 头标志例如{“a”:“11”} @return true 代表成功 false代表失败 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ var url = \"https://imtt.dd.qq.com/16891/apk/DF4FD15AF9A9B51BA74D2710CF738EEF.apk?fsname=com.ishugui_3.9.2.3068_3923068.apk&csr=1bbd\"; var x = http.downloadFileDefault(url, \"/sdcard/ss.apk\", {\"User-Agent\": \"test\"}); toast(\"download result-> \" + x); } main(); http.httpGetDefault Http GET 请求 @param url 请求的URL @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ var url = \"http://192.168.0.5:8081/api/httpGet?a=1\"; var x = http.httpGetDefault(url, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.httpGet Http GET 请求 @param url 请求的URL @param params 参数Map表 例如 {\"a\":\"1\"} 这样的参数或者字符串 @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ var url = \"http://192.168.0.5:8081/api/httpGet?a=1\"; var pa = {\"b\": \"22\"}; var x = http.httpGet(url, pa, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.httpPost Http Post 请求 @param url 请求的URL @param params 参数，例如 {\"a\":\"1\"} 这样的参数或者字符串 @param files 要上传的文件，例如 {\"file1\":\"/sdcard/1.png\"}这样的文件参数 @param timeout 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ //不带文件的请求 var url = \"http://192.168.0.5:8081/api/httpPost\"; var pa = {\"b\": \"我是b的值\"}; var x = http.httpPost(url, pa, null, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); loadECModule(\"global\"); loadECModule(\"http\"); function main(){ //带上传文件的请求 var url = \"http://192.168.0.5:8081/api/httpPost\"; var pa = {\"b\": \"我是b的值\"}; var files = {\"file1\": \"/sdcard/p.json\", \"file2\": \"/sdcard/z.xml\"}; var x = http.httpPost(url, pa, files, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); http.postJSON HTTP POST JSON数据 @param url 请求的URL @param json json数据 @param timeout – 超时时间 单位毫秒 @param headers – 头标志例如{“a”:“11”} @return 字符串 请求后返回的字符串 loadECModule(\"global\"); loadECModule(\"http\"); function main(){ var url = \"http://192.168.0.5:8081/api/postJSON\"; var pa = {\"b\": \"我是b的值\"}; var x = http.postJSON(url, pa, 10 * 1000, {\"User-Agent\": \"test\"}); toast(\" result-> \" + x); loge(\"result -> \" + x); } main(); "},"zh-cn/funcs/thread-api.html":{"url":"zh-cn/funcs/thread-api.html","title":"线程函数","keywords":"","body":"说明 线程模块函数主要是跟线程信息相关联 线程模块的对象前缀是thread，例如 thread.execFuncSync()这样调用 载入模块 loadECModule(\"thread\"); 函数 setTimeout 设定延迟多少毫秒后执行函数，在子线程中执行 @param func 要执行的函数 @param timeout 延迟时间，单位是毫秒 线程对象 该对象可以进行取消 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ var t=setTimeout(function() { toast(\"我是一秒后执行的代码\"); },1000); } main(); cancelTimeout 取消延迟执行 @param t 要取消的函数 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ var t=setTimeout(function() { toast(\"我是一秒后执行的代码\"); },1000); //取消就不会执行了 cancelTimeout(t); } main(); setInterval 设置多少周期进行执行一次，在子线程中执行 @param func 函数 @param interval 周期时间，单位是毫秒 @return 线程对象 该对象可以进行取消 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ var t=setInterval(function() { toast(\"我是每隔一秒执行的代码\"); },1000); } main(); cancelInterval 取消周期执行的函数 @param t 要取消的函数 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ var t=setInterval(function() { toast(\"我是每隔一秒执行的代码\"); },1000); cancelInterval(t); } main(); execSync 执行某个函数并且等待true返回，如果函数中返回的是true，该方法将立刻执行完毕 @param condition 条件函数 @param timeout 超时时间，单位是毫秒 @return 布尔型 返回一个布尔型值 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ execSync(function() { logd(\"我是同步执行的代码\"); },1000); } main(); thread.execAsync 异步执行线程，这里会将Runnable放到线程池中进行管理 @param runnable Runnable对象 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ thread.execAsync(function() { logd(\"我是异步执行的代码\"); }); } main(); thread.execSync 执行某个函数并且等待true返回，如果函数中返回的是true，该方法将立刻执行完毕 @param condition 条件函数 @param timeout 超时时间，单位是毫秒 @return 布尔型 返回一个布尔型值 loadECModule(\"global\"); loadECModule(\"thread\"); function main(){ thread.execSync(function() { logd(\"我是同步执行的代码\"); },1000); } main(); "},"zh-cn/funcs/utils-api.html":{"url":"zh-cn/funcs/utils-api.html","title":"常用工具函数","keywords":"","body":"说明 工具类模块函数主要是跟Android常用的信息相关联 工具类模块的对象前缀是utils，例如 utils.requestShowLogPermission()这样调用 载入模块 loadECModule(\"utils\"); 函数 日志浮窗相关 utils.requestShowLogPermission 请求展示日志浮窗的权限 @param timeout 请求权限超时时间 单位是秒 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //请求悬浮窗权限，10超时时间 var testData = utils.requestShowLogPermission(10*1000); toast(\"权限请求结果:\"+testData); } main(); utils.hasShowLogPermission 检查是否含有浮窗权限 @return true 有权限,false 代表无权限 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var testData = utils.hasShowLogPermission(); toast(\"权限:\"+testData); } main(); utils.showLogWindow 展示日志浮窗 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.showLogWindow(); } main(); utils.closeLogWindow 关闭日志浮窗 @return true 代表请求权限成功，false代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.closeLogWindow(); } main(); utils.setLogViewSize 设置日志窗口大小 @param w 宽度 @param h 高度 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.setLogViewSize(500,600); } main(); utils.setLogText 展示日志到浮窗中 @param log 日志 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.setLogText(\"test\"); } main(); utils.hideLogWindow 隐藏日志浮窗 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.hideLogWindow(); } main(); utils.hideLogWindow 显示消息 @param msg 消息内容 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.toast(\"test\"); } main(); 打开App相关 utils.openApp 打开APP @param packageName 程序的包名 @return 布尔型 true 代表成功，false 代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //打开微信 utils.openApp(\"com.tencent.mm\"); } main(); utils.openAppByName 打开APP，通过应用名称 @param appName 程序名称，比如今日头条 @return 布尔型 true 代表成功，false 代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //打开微信 utils.openAppByName(\"微信\"); } main(); utils.openActivity 打开一个activity，通过map参数 @param map 例如{\"action\":\"\"},key的固定只有 action, uri,pkg,className,flag,其他的都是参数了 @return 布尔型 true 代表成功，false 代表失败 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ //打开抖音直播 var map={ \"uri\":\"snssdk1128://aweme/live/6701887916223941379\", }; utils.openActivity(map); } main(); 图库相关 utils.insertImageToAlbum 将图片插入到相册中，此方法会立刻更新相册数据 @param path 图片路径 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.insertImageToAlbum(\"/sdcard/a.png\"); } main(); utils.insertVideoToAlbum 将视频插入到相册中，此方法会立刻更新相册数据 @param path 视频路径 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ utils.insertVideoToAlbum(\"/sdcard/a.mp4\"); } main(); 其他 utils.readConfigInt 读取JSON中的整型数据 @param jsonObject JSON对象 @param key 配置项目 @return 整型，找不到就返回0 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var testData = utils.readConfigInt(jsonObject,\"test_key\"); } main(); utils.readJSONString 读取JSON中的字符串数据 @param jsonObject JSON对象 @param key 配置项目 @return 字符串 找不到就返回空字符串 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var testData = utils.readConfigString(jsonObject,\"test_key\"); } main(); utils.isObjectNull 判断一个对象为空 @param o 对象 @return true或者false loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var isNull = utils.isObjectNull(\"test_key\"); } main(); utils.isObjectNotNull 判断一个对象不为空 @param o 对象 @return true或者false loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var isNull = utils.isObjectNotNull(\"test_key\"); } main(); utils.getRatio 取得比例，例如10参数，就是返回10%的比例，如果是true，说明随机比例正确，否则不正确 @param ratio 浮点型 1-100 @return true或者false loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var ratio = utils.getRatio(20f); toast(ratio); } main(); utils.getRangeInt 取得某个范围的随机值 @param min 最小值 @param max 最大值 @return 在min和max中间的值,包含最大和最小值 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var value = utils.getRangeInt(1,100); toast(value); } main(); utils.isTrue 判断布尔型对象是否为真 @param r 布尔型对象 @return true 或者 false loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var value = utils.isTrue(true); } main(); utils.fileMd5 文件的MD5 @param file 文件路径 @return 文件MD5字符串或者null loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var md5 = utils.fileMd5(\"/sdcard/a.txt\"); } main(); utils.dataMd5 数据计算出来的MD5 @param data 数据 @return 数据MD5字符串或者null loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var md5 = utils.dataMd5(\"data\"); } main(); utils.randomInt 随机整型数据 @param length 位数，要随机产生多少位的整型数据 @return 整型 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var r = utils.randomInt(2); } main(); utils.randomCharNumber 取得随机的数字和字母 @param length 长度 @return 字符串数字混合 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var r = utils.randomCharNumber(2); } main(); utils.getApkPkgName 取得App文件的包名 @param filePath 文件路径 @return 字符串 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var pkgName = utils.getApkPkgName(\"/sdcard/app.apk\"); } main(); utils.isAppExist App是否已经安装 @param packageName 应用程序的包名 @return true 代表已经安装，false代表未安装 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var result = utils.isAppExist(\"com.ss.android.article.news\"); } main(); utils.getAppVersionCode 取得已安装的程序的版本整型标示 @param packageName 应用程序的包名 @return 整型 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var versionCode = utils.getAppVersionCode(\"com.ss.android.article.news\"); } main(); utils.getAppVersionName 取得已安装的程序的版本字符串标示 @param packageName 应用程序的包名 @return 字符串 例如 1.0.0 loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var r = utils.getAppVersionName(\"com.ss.android.article.news\"); } main(); utils.setClipboardText 设置剪贴板文本 @param text 文本 @return boolean loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var r = utils.setClipboardText(\"com.ss.android.article.news\"); toast(\"设置结果:\"+r); } main(); utils.getClipboardText 读取剪贴板文本 @return string loadECModule(\"global\"); loadECModule(\"utils\"); function main(){ var r = utils.getClipboardText(); toast(\"读取结果:\"+r); } main(); "},"zh-cn/funcs/shell-api.html":{"url":"zh-cn/funcs/shell-api.html","title":"Shell命令函数","keywords":"","body":"说明 代理模式下才能使用该函数，用户执行shell命令 shell模块的对象前缀是shell，例如 shell.installApp()这样调用 载入模块 loadECModule(\"shell\"); shell.installApp 安装 apk @param path 文件路径 @return true 代表安装成功，false 代表安装失败 loadECModule(\"global\"); loadECModule(\"shell\"); function main(){ var result = shell.installApp(\"/sdcard/app.apk\"); } main(); shell.uninstallApp 卸载应用程序 @param packageName 应用程序的包名 @return true 代表卸载成功，false 代表卸载失败 loadECModule(\"global\"); loadECModule(\"shell\"); function main(){ var result = shell.uninstallApp(\"com.ss.android.article.news\"); } main(); shell.stopApp 停止正在执行的应用 @param packageName 应用程序的包名 @return true 代表成功，false 代表失败 loadECModule(\"global\"); loadECModule(\"shell\"); function main(){ var result = shell.stopApp(\"com.ss.android.article.news\"); } main(); shell.execCommand 执行Shell命令 @param command 命令，例如安装App ： pm install /sdcard/app.apk @return 命令执行后返回的字符串结果 loadECModule(\"global\"); loadECModule(\"shell\"); function main(){ var result = shell.execCommand(\"pm install /sdcard/app.apk\"); } main(); "},"zh-cn/funcs/ui-custom.html":{"url":"zh-cn/funcs/ui-custom.html","title":"UI定制","keywords":"","body":"说明 EasyClick 遵循了Android的UI设计方式，相当于Android UI的简化版本 多tab标签支持 如果需要多tab支持，只要在工程的layout工程下新建一个tab.ini文件即可 内容是 tab名称=布局文件名称，例如 参数配置=main.xml 注册使用=reg.xml 使用说明=intr.xml 支持以下视图 LinearLayout 线性布局 FrameLayout 帧布局 RelativeLayout 绝对布局 ScrollView 滚动框 View视图 Button 按钮 TextView 文本视图 EditText 输入框 CheckBox 复选框 RadioGroup布局 RadioButton 单选框 Spinner 下拉选择框 公有属性 属性名 说明 可选值 layout_width 宽度 wrap_content: 和自身内容一样的长度 match_parent:和父组件一样的长度具体数字+dp layout_height 高度 wrap_content: 和自身内容一样的长度 match_parent:和父组件一样的长度具体数字+dp background 背景色 16进制的背景色，例如#FFFFFF或者#FFFFFFFF tag 标签 中英文都可，在代码中可以通过tag获取对应的值 visibility 是否可展示 gone:不展示visible:展示invisible:不展示但是占用空间 clickable 是否可点击 true: 可点击 false: 不可点击 enable 是否启用 true: 启用 false: 禁用 minHeight 最小高度 具体数字+dp minWidth 最小宽度 具体数字+dp paddingLeft 左内边距 具体数字+dp paddingTop 上内边距 具体数字+dp paddingRight 右内边距 具体数字+dp paddingBottom 下内边距 具体数字+dp padding 上下左右内边距 具体数字+dp layout_gravity 自身相当于父容器的对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal layout_margin 上下左右外边距 具体数字+dp layout_marginLeft 左外边距 具体数字+dp layout_marginRight 右外边距 具体数字+dp layout_marginTop 上外边距 具体数字+dp layout_marginBottom 下外边距 具体数字+dp UI高度和宽度解释 属性为：layout_width, layout_height match_parent 填充满父容器 wrap_content 以自身实际宽度为准 数字型，例如：12dp，代表12个dp宽度，dp是android的宽度单位 UI界面参数读取 参考 全局模块UI参数读取 "},"zh-cn/funcs/ui/linearlayout.html":{"url":"zh-cn/funcs/ui/linearlayout.html","title":"LinearLayout线性布局","keywords":"","body":"说明 LinearLayout，中文意思就是线性布局， 在实际开发中比较常用的布局，它主要以水平和垂直的方式来显示界面中的控件。 在线性布局中，线性布局管理器允许为每一个子视图指定一个weight属性，以控制每一个子视图在空间内的大小。 而线性布局中的orientation属性则是用于控制控件的排列方向。 android:orientation=\"vertical\"属性将其指定为垂直线性排列； android:orientation=\"horizontal\"属性将其指定为水平线性排列； 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 orientation 方向 vertical:垂直 horizontal:水平 "},"zh-cn/funcs/ui/framelayout.html":{"url":"zh-cn/funcs/ui/framelayout.html","title":"FrameLayout帧布局","keywords":"","body":"说明 FrameLayout，帧布局是最为简单的一种布局，该布局为每个加入其中的控件创建一个空白区域，称为一帧，每个控件占据一帧。采用帧布局时，所有控件都默认显示在屏幕左上角，并按照先后放入的顺序重叠摆放，先放入的将会在最底层，后放入的控件显示在最顶层。帧布局使用于图层设计。 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 "},"zh-cn/funcs/ui/relativelayout.html":{"url":"zh-cn/funcs/ui/relativelayout.html","title":"RelativeLayout绝对布局","keywords":"","body":"说明 相对布局是通过相对定位的方式制定控件位置，即以其他的控件或父容器为参照物，摆放控件位置。在设计相对布局时要遵循控件之间的依赖关系，后放入的控件的位置要依赖于先放入的控件。 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal "},"zh-cn/funcs/ui/scrollview.html":{"url":"zh-cn/funcs/ui/scrollview.html","title":"ScrollView滚动框","keywords":"","body":"说明 可以滚动的布局控件，子元素只能有一个 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 fillViewport 填充所有视图 true: 是 false:否 "},"zh-cn/funcs/ui/view.html":{"url":"zh-cn/funcs/ui/view.html","title":"View视图","keywords":"","body":"说明 View，最基础的视图 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 无 "},"zh-cn/funcs/ui/button.html":{"url":"zh-cn/funcs/ui/button.html","title":"Button按钮","keywords":"","body":"说明 按钮 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 按钮文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 "},"zh-cn/funcs/ui/textview.html":{"url":"zh-cn/funcs/ui/textview.html","title":"TextView文本","keywords":"","body":"说明 文本 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 按钮文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 lines 行数 具体数字 maxLines 最大 具体数字 ellipsize 文字长度超过宽度时的显示方式 start:省略号显示在开头end:省略号显示在结尾middle:省略号显示在中间marquee:以横向滚动方式显示(需获得当前焦点时)none:不显示 "},"zh-cn/funcs/ui/edittext.html":{"url":"zh-cn/funcs/ui/edittext.html","title":"EditText输入框","keywords":"","body":"说明 文本输入框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal hit 输入提示 字符串 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp maxLength 文字最大长度 具体数字 lines 行数 具体数字 maxLines 最大 具体数字 ellipsize 文字长度超过宽度时的显示方式 start:省略号显示在开头end:省略号显示在结尾middle:省略号显示在中间marquee:以横向滚动方式显示(需获得当前焦点时)none:不显示 "},"zh-cn/funcs/ui/checkbox.html":{"url":"zh-cn/funcs/ui/checkbox.html","title":"CheckBox复选框","keywords":"","body":"说明 复选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal checked 是否选择 true:选中 false:不选中 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/ui/radiogroup.html":{"url":"zh-cn/funcs/ui/radiogroup.html","title":"RadioGroup布局","keywords":"","body":"说明 RadioGroup用于包裹RadioButton实现只选中一个的效果，继承LinearLayout，包含线性布局的属性 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 orientation 方向 vertical:垂直 horizontal:水平 "},"zh-cn/funcs/ui/radiobutton.html":{"url":"zh-cn/funcs/ui/radiobutton.html","title":"RadioButton单选框","keywords":"","body":"说明 单选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal checked 是否选择 true:选中 false:不选中 text 文字 字符串 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/ui/spinner.html":{"url":"zh-cn/funcs/ui/spinner.html","title":"Spinner下拉选择框","keywords":"","body":"说明 下拉选框 使用示例 属性说明 公有属性 请参考 公有属性 私有属性 属性名 说明 可选值 layout_weight 子元素权重 数字当父级为LinearLayout的时候，子控件可以设置权重 gravity 内部的控件对齐方式 用法参考topbottomleftrightcenter_verticalfill_verticalcenter_horizontalfill_horizontalcenterfillclip_verticalclip_horizontal text 下拉文字 字符串多个下拉选项用竖线分隔，例如：选项1|选型2 textColor 文字颜色 16进制，例如#FFFFFF textSize 文字大小 具体数字+dp "},"zh-cn/funcs/plugin/plugins.html":{"url":"zh-cn/funcs/plugin/plugins.html","title":"三方插件","keywords":"","body":"说明 插件本身是一个apk包，和普通的android开发无任何区别 开发的时候可以使用Android Studio进行开发，打包成apk即可 插件编写 插件目录结构 插件工程本身是一个android工程 插件工程中有resources文件夹，其中包括js文件夹和class.json js文件夹是插件要暴露的js代码，插件被加载的时候，js文件夹中的所有文件都会被加载到执行环境中 class.json是用来配置暴露的java类 属性值: clz: 插件类名 属性值: key: 暴露给js使用的变量名 例如： { \"clz\": \"com.android.plugin.TestPlugin1\", \"key\": \"p1\" } 插件java类编写 java类需要一个默认构造函数 如果需要使用Context，可以定义需要一个含有Context参数的构造函数 实例： package com.android.plugin; import android.content.Context; public class TestPlugin1 { public TestPlugin1(Context context) { } public TestPlugin1() { } public String readFromPlugin() { return \"fdsfsadfsaffasdfsadfsa\"; } } 插件js编写 插件js代码和脚本的代码编写一样 实例: function testPlugin() { logd(\"我是插件\"); toast(\"我是插件信息\"); } 插件使用 插件编写好后，打成apk包，放在工程的plugin文件夹下，例如名称为plugin-test.apk载入插件 实例: 插件名称为plugin-test.apk loadECPlugin(\"plugin-test\"); 使用插件js代码 如果不包含js代码，无法调用 实例：插件名称为plugin-test.apk，包含plugin1.js文件 //调用plugin-test插件中plugin1.js的testPlugin方法 testPlugin(); 使用插件java代码 如果不包含java代码，无法调用 实例：插件名称为plugin-test.apk，包含com.android.plugin.TestPlugin1类，class.json定义的key为p1 //调用plugin-test插件中java p1.readFromPlugin(); "},"zh-cn/question-answer.html":{"url":"zh-cn/question-answer.html","title":"常见问题","keywords":"","body":"为什么选择JavaScript语言? 简单易上手，资料多 会基本语法和函数调用就可以编程 开发工具成熟易上手 开发工具连接不到手机? 这种情况是因为adb连接不成功导致的，adb连接需要满足一下几个条件： 手机开启usb调试模式 手机通过数据线连接上电脑 没有其他占用adb工具的程序 Adb被占用解决办法 手机开启usb调试模式 关闭其他占用adb的软件 用任务管理器结束掉所有的ADB，确保手机没有占用adb的命令 电脑上的各种杀毒管家，刷机助手等也会占用adb，确保已经关闭 "},"zh-cn/declare.html":{"url":"zh-cn/declare.html","title":"免责申明","keywords":"","body":" EasyClick 以技术交流学习为目的的初衷，不包含任何外挂、辅助等危害计算机信息的违法功能 如果您使用了EasyClick，标示您已经充分理解与同意，必须遵守以下原则: 您开发的软件或者脚本归属权以及版权属于您自己，与EasyClick无关。 您开发的软件出现问题，包括但不限于法律责任、软件异常，由您自己承担责任。 您不得用于开发非法软件，包括到不限于恶意注册、诈骗、危害国家、危害他人等非法软件。 您使用EasyClick开发的软件，所有权利和责任都由您自己承担。 "}}